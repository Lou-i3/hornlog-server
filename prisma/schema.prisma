generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String?   @db.VarChar(255)
  expiryDate DateTime? @db.DateTime(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "userId")
  @@map("refreshToken")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  displayName        String?        @db.VarChar(255)
  email              String         @unique
  password           String?
  active             Boolean?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  refreshTokens      RefreshToken[]
  role               Role           @default(USER)
  resetPasswordToken String         @default("")
  lastLoginAt        DateTime?      @default(now())

  userSettings UserSettings?
  hooks        Hook[]
  person       Person?
  partners     Partner[]

  locations Location[]
  genders   Gender[]

  @@map("user")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique // relation scalar field (used in the `@relation` attribute above)

  darkMode darkModeChoice @default(Dark)
}

enum darkModeChoice {
  Light
  Dark
}

model Person {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int?       @unique // relation scalar field (used in the `@relation` attribute above)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  nickName    String?    @db.VarChar(255)
  how         String?    @db.VarChar(255)
  birthday    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  picture     String?    @db.LongText
  nationality String?    @db.VarChar(255)
  sexuality   Sexuality?
  partner     Partner?
  locations   Location[]
  gender      Gender?    @relation(fields: [genderId], references: [id])
  genderId    Int?
  notes       String?     @db.LongText

  sexPosition  SexPosition?
  contactInfos ContactInfo[]
}

enum Sexuality {
  Gay
  Bi
  Straight
}

model ContactInfo {
  id Int @id @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId Int

  info        String
  designation String

  type ContactType
}

enum ContactType {
  Phone
  Email
  social_media
}

model Hook {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  hookType         HookType @default(Date)
  ownerId          Int
  owner            User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dateTime         DateTime @default(now())
  duration         Int?
  orgasm           Boolean?
  porn             Boolean?
  sex              Boolean?
  penetration      Boolean?
  pill             Boolean?
  protection       Boolean?
  note             String?  @db.LongText
  grade            Int?
  mood             Int?
  addToAppleHealth Boolean?
  archived         Boolean?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  partners HooksOnPartners[]
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name      String  @db.VarChar(255)
  latitude  Float?
  longitude Float?
  address   String? @db.VarChar(255)
  city      String? @db.VarChar(255)
  country   String? @db.VarChar(255)
  zipCode   String? @db.VarChar(255)

  hooks    Hook[]
  person   Person? @relation(fields: [personId], references: [id])
  personId Int?

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int

  type LocationType
}

enum LocationType {
  my_place
  your_place
  other
}

model Gender {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  label     String

  owner   User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int?
  people  Person[]
}

enum SexPosition {
  top
  vers_top
  versa
  vers_bottom
  bottom
}

enum HookType {
  Hang
  Date
  one_time  @map("One Time")
  Night
  Virtual
  Self
}

enum ProtectionType {
  Protected
  Unprotected
  not_required  @map("Not Required")
}

model Partner {
  id Int @id @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId Int    @unique // relation scalar field (used in the `@relation` attribute above)

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int

  hooks HooksOnPartners[]
}

model HooksOnPartners {
  partner    Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partnerId  Int // relation scalar field (used in the `@relation` attribute above)
  hook       Hook     @relation(fields: [hookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hookId     Int // relation scalar field (used in the `@relation` attribute above) 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([partnerId, hookId])
}
