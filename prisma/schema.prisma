generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String?   @db.VarChar(255)
  expiryDate DateTime? @db.DateTime(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "userId")
  @@map("refreshToken")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  displayName        String?        @db.VarChar(255)
  email              String         @unique
  password           String?
  active             Boolean?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  refreshTokens      RefreshToken[]
  role               Role           @default(USER)
  resetPasswordToken String         @default("")
  lastLoginAt        DateTime?      @default(now())

  userSettings UserSettings?
  hooks        Hook[]
  person       Person?
  @@map("user")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique // relation scalar field (used in the `@relation` attribute above)

  darkMode darkModeChoice @default(Dark)
}

enum darkModeChoice {
  Light
  Dark
}

model Person {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique // relation scalar field (used in the `@relation` attribute above)
  firstName   String     @db.VarChar(255)
  lastName    String     @db.VarChar(255)
  nickName    String?    @db.VarChar(255)
  birthday    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  picture     String?    @db.VarChar(255)
  nationality String?    @db.VarChar(255)
  sexuality   Sexuality?
}

enum Sexuality {
  Gay
  Bi
  Straight
}

model Hook {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  hookType         HookType        @default(Date)
  ownerId          Int
  owner            User            @relation(fields: [ownerId], references: [id])
  dateTime         DateTime        @default(now())
  duration         Int?
  orgasm           Boolean?
  porn             Boolean?
  note             String?
  grade            Int?
  protected        ProtectionType?
  mood             Int?
  addToAppleHealth Boolean?
  archived          Boolean?

}

enum HookType {
  Date
  one_night_stand  @map("One Night Stand")
  self_pleasure    @map("Self Pleasure")
  sex_friend       @map("Sex Friend")
  Friend
  Sexting
}

enum ProtectionType {
  Protected
  Unprotected
  not_required  @map("Not Required")
}
