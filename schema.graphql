### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type ContactInfo {
  designation: String
  id: ID!
  info: String
  owner: User!
}

"""Types of Contact"""
enum ContactType {
  Email
  Facebook
  Instagram
  LinkedIn
  Phone
  Snapchat
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Gender {
  createdAt: DateTime!
  id: ID!
  label: String!
  owner: User
  updatedAt: DateTime!
}

input GenderInput {
  label: String!
}

type Hook {
  addToAppleHealth: Boolean
  archived: Boolean
  createdAt: DateTime!
  dateTime: DateTime!
  duration: Int
  grade: Int
  hookType: HookType!
  id: ID!
  location: Location
  mood: String
  note: String
  orgasm: Boolean
  owner: User!
  partners: HooksOnPartners
  porn: Boolean
  protectionType: ProtectionType
  updatedAt: DateTime!
}

input HookCreateInput {
  addToAppleHealth: Boolean
  archived: Boolean
  dateTime: DateTime
  duration: Int
  grade: Int
  hookType: HookType!
  mood: String
  note: String
  orgasm: Boolean
  porn: Boolean
  protected: Boolean
  protectionType: ProtectionType
}

"""Types of Hook"""
enum HookType {
  Date
  Friend
  Sexting
  one_night_stand
  self_pleasure
  sex_friend
}

input HookUpdateInput {
  addToAppleHealth: Boolean
  archived: Boolean
  dateTime: DateTime
  duration: Int
  grade: Int
  hookType: HookType
  mood: String
  note: String
  orgasm: Boolean
  porn: Boolean
  protected: Boolean
  protectionType: ProtectionType
}

type HooksOnPartners {
  assignedAt: DateTime!
  hook: Hook!
  id: ID!
  partner: Partner!
}

type Location {
  createdAt: DateTime!
  id: ID!
  owner: User!
  person: Person!
  updatedAt: DateTime!
}

type Mutation {
  addAppGender(data: GenderInput!): Gender!
  addHook(data: HookCreateInput!): Hook!
  addUser(displayName: String!, email: String!, password: String, username: String!): AuthPayload!
  addUserGender(data: GenderInput!): Gender!
  deleteGender(id: Int!): Gender!
  editGender(data: GenderInput!, id: Int!): Gender!
  editHook(data: HookUpdateInput!): Hook!
  login(email: String!, password: String!): AuthPayload
  signupUser(data: UserCreateInput!): User!
}

type Partner {
  hooks: [Hook]
  id: ID!
  owner: User!
  person: Person!
}

type Person {
  birthday: DateTime
  createdAt: DateTime!
  dateTime: DateTime!
  firstName: String
  gender: Gender
  id: ID!
  lastName: String
  locations: Location
  nationality: String
  nickName: String
  owner: User!
  picture: String
  sexPosition: SexPosition
  sexuality: Sexuality
  updatedAt: DateTime!
}

"""Types of protection"""
enum ProtectionType {
  Protected
  Unprotected
  not_required
}

type Query {
  accessibleGenders: [Gender]
  allHooks: [Hook]
  allUsers: [User!]!
  appGenders: [Gender]
  me: User
  myGenders: [Gender]
  myHooks: [Hook]
  myPartners: [Partner]
  ok: String
}

"""Defines authorizations"""
enum Role {
  ADMIN
  MODERATOR
  USER
}

"""Types of Positions"""
enum SexPosition {
  bottom
  top
  vers_bottom
  vers_top
  versa
}

"""Types of Sexuality"""
enum Sexuality {
  Bi
  Gay
  Straight
}

enum SortOrder {
  asc
  desc
}

type User {
  contactInfos: [ContactInfo]
  createdAt: DateTime
  displayName: String
  email: String!
  genders: [Gender]
  hooks: [Hook]
  id: ID!
  lastLoginAt: DateTime!
  locations: [Location]
  partners: [Partner]
  password: String!
  resetPasswordToken: String!
  role: Role!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String!
  name: String
}

type UserSettings {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
}

input UserUniqueInput {
  email: String
  id: Int
  username: String
}

"""Dark Mode Choices"""
enum darkModeChoice {
  Dark
  Light
}
